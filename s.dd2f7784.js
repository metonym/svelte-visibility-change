var app=function(){"use strict";function n(){}function s(n){return n()}function a(){return Object.create(null)}function t(n){n.forEach(s)}function e(n){return"function"==typeof n}function o(n,s){return n!=n?s==s:n!==s}function p(n,s){n.appendChild(s)}function i(n){n.parentNode.removeChild(n)}function c(n){return document.createElement(n)}function l(n){return document.createTextNode(n)}function u(){return l(" ")}function r(n,s,a){null==a?n.removeAttribute(s):n.getAttribute(s)!==a&&n.setAttribute(s,a)}let d;function k(n){d=n}function h(){if(!d)throw new Error("Function called outside component initialization");return d}function g(){const n=h();return(s,a)=>{const t=n.$$.callbacks[s];if(t){const e=function(n,s,a=!1){const t=document.createEvent("CustomEvent");return t.initCustomEvent(n,a,!1,s),t}(s,a);t.slice().forEach((s=>{s.call(n,e)}))}}}const f=[],v=[],b=[],m=[],y=Promise.resolve();let $=!1;function T(n){b.push(n)}let w=!1;const x=new Set;function C(){if(!w){w=!0;do{for(let n=0;n<f.length;n+=1){const s=f[n];k(s),L(s.$$)}for(k(null),f.length=0;v.length;)v.pop()();for(let n=0;n<b.length;n+=1){const s=b[n];x.has(s)||(x.add(s),s())}b.length=0}while(f.length);for(;m.length;)m.pop()();$=!1,w=!1,x.clear()}}function L(n){if(null!==n.fragment){n.update(),t(n.before_update);const s=n.dirty;n.dirty=[-1],n.fragment&&n.fragment.p(n.ctx,s),n.after_update.forEach(T)}}const M=new Set;function H(n,s){n&&n.i&&(M.delete(n),n.i(s))}function E(n,s,a,t){if(n&&n.o){if(M.has(n))return;M.add(n),undefined.c.push((()=>{M.delete(n),t&&(a&&n.d(1),t())})),n.o(s)}}function _(n){n&&n.c()}function A(n,a,o,p){const{fragment:i,on_mount:c,on_destroy:l,after_update:u}=n.$$;i&&i.m(a,o),p||T((()=>{const a=c.map(s).filter(e);l?l.push(...a):t(a),n.$$.on_mount=[]})),u.forEach(T)}function j(n,s){const a=n.$$;null!==a.fragment&&(t(a.on_destroy),a.fragment&&a.fragment.d(s),a.on_destroy=a.fragment=null,a.ctx=[])}function S(n,s){-1===n.$$.dirty[0]&&(f.push(n),$||($=!0,y.then(C)),n.$$.dirty.fill(0)),n.$$.dirty[s/31|0]|=1<<s%31}function P(s,e,o,p,c,l,u,r=[-1]){const h=d;k(s);const g=s.$$={fragment:null,ctx:null,props:l,update:n,not_equal:c,bound:a(),on_mount:[],on_destroy:[],on_disconnect:[],before_update:[],after_update:[],context:new Map(e.context||(h?h.$$.context:[])),callbacks:a(),dirty:r,skip_bound:!1,root:e.target||h.$$.root};u&&u(g.root);let f=!1;if(g.ctx=o?o(s,e.props||{},((n,a,...t)=>{const e=t.length?t[0]:a;return g.ctx&&c(g.ctx[n],g.ctx[n]=e)&&(!g.skip_bound&&g.bound[n]&&g.bound[n](e),f&&S(s,n)),a})):[],g.update(),f=!0,t(g.before_update),g.fragment=!!p&&p(g.ctx),e.target){if(e.hydrate){const n=function(n){return Array.from(n.childNodes)}(e.target);g.fragment&&g.fragment.l(n),n.forEach(i)}else g.fragment&&g.fragment.c();e.intro&&H(s.$$.fragment),A(s,e.target,e.anchor,e.customElement),C()}k(h)}class I{$destroy(){j(this,1),this.$destroy=n}$on(n,s){const a=this.$$.callbacks[n]||(this.$$.callbacks[n]=[]);return a.push(s),()=>{const n=a.indexOf(s);-1!==n&&a.splice(n,1)}}$set(n){var s;this.$$set&&(s=n,0!==Object.keys(s).length)&&(this.$$.skip_bound=!0,this.$$set(n),this.$$.skip_bound=!1)}}function q(n,s,a){let{state:t}=s,{visible:e=!1}=s,{hidden:o=!1}=s;const p=g(),i=()=>{a(0,t=document.visibilityState),p("change",{state:t,visible:e,hidden:o})};var c;return c=()=>(a(0,t=document.visibilityState),document.addEventListener("visibilitychange",i),()=>document.removeEventListener("visibilitychange",i)),h().$$.on_mount.push(c),n.$$set=n=>{"state"in n&&a(0,t=n.state),"visible"in n&&a(1,e=n.visible),"hidden"in n&&a(2,o=n.hidden)},n.$$.update=()=>{1&n.$$.dirty&&a(1,e="visible"===t),1&n.$$.dirty&&a(2,o="hidden"===t),2&n.$$.dirty&&e&&p("visible"),4&n.$$.dirty&&o&&p("hidden")},[t,e,o]}var N=class extends I{constructor(n){super(),P(this,n,q,null,o,{state:0,visible:1,hidden:2})}};function V(n){let s,a,t,e,o,d,k,h,g,f,b,y,$,T,w,x,C,L,M,S,P,I,q,V,D,O,U,F,G,B,z,W,Y,R,J,K,Q,X,Z,nn,sn,an,tn,en,on,pn,cn,ln,un,rn,dn,kn,hn,gn,fn,vn,bn,mn,yn,$n,Tn,wn,xn,Cn,Ln,Mn,Hn,En,_n,An,jn,Sn,Pn,In,qn,Nn,Vn,Dn,On,Un,Fn,Gn,Bn,zn,Wn,Yn,Rn,Jn,Kn,Qn,Xn,Zn,ns,ss,as,ts,es,os,ps,is,cs,ls,us,rs,ds,ks,hs,gs,fs,vs,bs,ms=n[1].join(", ")+"";function ys(s){n[2](s)}let $s={};return void 0!==n[0]&&($s.state=n[0]),ln=new N({props:$s}),v.push((()=>function(n,s,a){const t=n.$$.props[s];void 0!==t&&(n.$$.bound[t]=a,a(n.$$.ctx[t]))}(ln,"state",ys))),xn=new N({}),xn.$on("visible",n[3]),xn.$on("hidden",n[4]),{c(){s=c("main"),a=c("h1"),a.textContent="svelte-visibility-change",t=u(),e=c("p"),e.innerHTML='<a href="https://npmjs.com/package/svelte-visibility-change"><img src="https://img.shields.io/npm/v/svelte-visibility-change.svg?style=for-the-badge&amp;color=%23ff3e00" alt="NPM"/></a>',o=u(),d=c("blockquote"),d.innerHTML='<p>Detect browser page visibility changes using the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Page_Visibility_API">Page Visibility API</a></p>',k=u(),h=c("p"),h.innerHTML='<a href="https://github.com/metonym/svelte-visibility-change">GitHub repo</a>',g=u(),f=c("p"),f.textContent="Use this utility component to declaratively listen to browser page visibility changes.",b=u(),y=c("p"),y.textContent="The visibility state of a page can either be “visible” or “hidden.”",$=u(),T=c("p"),T.innerHTML="<strong>Use cases</strong>",w=u(),x=c("ul"),x.innerHTML="<li>make a network request when the browser tab is focused</li> \n<li>play/pause audiot when the browser tab is focused or blurred</li> \n<li>pause expensive background computations when the tab is blurred</li>",C=u(),L=c("p"),L.innerHTML='Try it in the <a href="https://svelte.dev/repl/a4b8bdb782514baaa7fa1cb26313b303">Svelte REPL</a>.',M=u(),S=c("hr"),P=u(),I=c("p"),I.innerHTML="<strong>Table of Contents</strong>",q=c("ul"),q.innerHTML='<li><a href="#installation">Installation</a></li> \n<li><a href="#usage">Usage</a></li> \n<ul><li><a href="#basic">Basic</a></li> \n<li><a href="#visible-%2F-hidden">visible / hidden</a></li> \n<li><a href="#on%3Avisible-%2F-on%3Ahidden">on:visible / on:hidden</a></li> \n<li><a href="#on%3Achange">on:change</a></li> \n<li><a href="#visibilitychange-action">visibilityChange action</a></li> \n</ul><li><a href="#api">API</a></li> \n<ul><li><a href="#props">Props</a></li> \n<li><a href="#dispatched-events">Dispatched Events</a></li> \n</ul><li><a href="#typescript">TypeScript</a></li> \n<li><a href="#changelog">Changelog</a></li> \n<li><a href="#license">License</a></li>',V=u(),D=c("h2"),D.textContent="Installation",O=u(),U=c("p"),U.innerHTML="<strong>Yarn</strong>",F=u(),G=c("pre"),B=u(),z=c("p"),z.innerHTML="<strong>NPM</strong>",W=u(),Y=c("pre"),R=u(),J=c("p"),J.innerHTML="<strong>pnpm</strong>",K=u(),Q=c("pre"),X=u(),Z=c("h2"),Z.textContent="Usage",nn=u(),sn=c("h3"),sn.textContent="Basic",an=u(),tn=c("p"),tn.innerHTML="Bind to the <code>state</code> prop to determine if the current tab is currently visible or hidden.",en=u(),on=c("p"),on.textContent="In this live demo, switch to a different tab in the same browser window. The page title should change from “visible” to “hidden.”",pn=u(),cn=c("div"),_(ln.$$.fragment),rn=c("pre"),dn=u(),kn=c("h3"),kn.textContent="visible / hidden",hn=u(),gn=c("p"),gn.innerHTML="You can also bind to the boolean <code>visible</code> and <code>hidden</code> props.",fn=u(),vn=c("pre"),bn=u(),mn=c("h3"),mn.innerHTML="<code>on:visible</code> / <code>on:hidden</code>",yn=u(),$n=c("p"),$n.innerHTML="An alternative to binding to props is to listen to the <code>on:visible</code> and <code>on:hidden</code> dispatched events.",Tn=u(),wn=c("div"),_(xn.$$.fragment),Cn=u(),Ln=l(ms),Mn=c("pre"),Hn=u(),En=c("h3"),En.innerHTML="<code>on:change</code>",_n=u(),An=c("p"),An.innerHTML='This component dispatches an <code>on:change</code> event whenever a <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/visibilitychange_event">visibilitychange</a> event occurs.',jn=u(),Sn=c("p"),Sn.innerHTML="<strong>Note:</strong> unlike <code>on:visible</code>, this event only fires when the page visibility changes <em>after the component has mounted.</em>",Pn=u(),In=c("pre"),qn=u(),Nn=c("h3"),Nn.innerHTML="<code>visibilityChange</code> action",Vn=u(),Dn=c("p"),Dn.innerHTML="An alternative to the <code>VisibilityChange</code> component is the <code>visibilityChange</code> action.",On=u(),Un=c("p"),Un.innerHTML="The action only dispatches a “change” event with the same <code>event.detail</code> signature.",Fn=u(),Gn=c("pre"),Bn=u(),zn=c("p"),zn.innerHTML="If using the action with TypeScript, use the <code>OnChangeEvent</code> utility type to ameliorate TypeScript errors.",Wn=u(),Yn=c("pre"),Rn=u(),Jn=c("h2"),Jn.textContent="API",Kn=u(),Qn=c("h3"),Qn.textContent="Props",Xn=u(),Zn=c("table"),Zn.innerHTML='<thead><tr><th style="text-align:left">Name</th> \n<th style="text-align:left">Type</th> \n<th style="text-align:left">Default value</th></tr></thead> \n<tbody><tr><td style="text-align:left">state</td> \n<td style="text-align:left"><code>&quot;visible&quot;</code> or <code>&quot;hidden&quot;</code></td> \n<td style="text-align:left"><code>undefined</code></td></tr> \n<tr><td style="text-align:left">visible</td> \n<td style="text-align:left"><code>boolean</code></td> \n<td style="text-align:left"><code>false</code></td></tr> \n<tr><td style="text-align:left">hidden</td> \n<td style="text-align:left"><code>boolean</code></td> \n<td style="text-align:left"><code>false</code></td></tr></tbody>',ns=u(),ss=c("h3"),ss.textContent="Dispatched Events",as=u(),ts=c("ul"),ts.innerHTML="<li><strong>on:visible</strong>: fired if the page is visible</li> \n<li><strong>on:hidden</strong>: fired if the page visibility is hidden</li> \n<li><strong>on:change</strong>: fired when a page visibility event occurs, after the initial mount</li>",es=u(),os=c("h2"),os.textContent="TypeScript",ps=u(),is=c("p"),is.textContent="Svelte version 3.31 or greater is required to use this component with TypeScript.",cs=u(),ls=c("p"),ls.innerHTML='TypeScript definitions are located in the <a href="https://github.com/metonym/svelte-visibility-change/tree/master/types/">types folder</a>.',us=u(),rs=c("h2"),rs.textContent="Changelog",ds=u(),ks=c("p"),ks.innerHTML='<a href="https://github.com/metonym/svelte-visibility-change/tree/master/CHANGELOG.md">CHANGELOG.md</a>',hs=u(),gs=c("h2"),gs.textContent="License",fs=u(),vs=c("p"),vs.innerHTML='<a href="https://github.com/metonym/svelte-visibility-change/tree/master/LICENSE">MIT</a>',r(a,"id","svelte-visibility-change"),r(D,"id","installation"),r(G,"class","language-bash"),r(Y,"class","language-bash"),r(Q,"class","language-bash"),r(Z,"id","usage"),r(sn,"id","basic"),r(cn,"class","code-fence"),r(rn,"class","language-svelte"),r(rn,"data-svelte",""),r(kn,"id","visible-%2F-hidden"),r(vn,"class","language-svelte"),r(mn,"id","on%3Avisible-%2F-on%3Ahidden"),r(wn,"class","code-fence"),r(Mn,"class","language-svelte"),r(Mn,"data-svelte",""),r(En,"id","on%3Achange"),r(In,"class","language-svelte"),r(Nn,"id","visibilitychange-action"),r(Gn,"class","language-svelte"),r(Yn,"class","language-html"),r(Jn,"id","api"),r(Qn,"id","props"),r(ss,"id","dispatched-events"),r(os,"id","typescript"),r(rs,"id","changelog"),r(gs,"id","license"),r(s,"class","markdown-body")},m(n,i){!function(n,s,a){n.insertBefore(s,a||null)}(n,s,i),p(s,a),p(s,t),p(s,e),p(s,o),p(s,d),p(s,k),p(s,h),p(s,g),p(s,f),p(s,b),p(s,y),p(s,$),p(s,T),p(s,w),p(s,x),p(s,C),p(s,L),p(s,M),p(s,S),p(s,P),p(s,I),p(s,q),p(s,V),p(s,D),p(s,O),p(s,U),p(s,F),p(s,G),G.innerHTML='<span class="token function">yarn</span> <span class="token function">add</span> -D svelte-visibility-change\n',p(s,B),p(s,z),p(s,W),p(s,Y),Y.innerHTML='<span class="token function">npm</span> i -D svelte-visibility-change\n',p(s,R),p(s,J),p(s,K),p(s,Q),Q.innerHTML='<span class="token function">pnpm</span> i -D svelte-visibility-change\n',p(s,X),p(s,Z),p(s,nn),p(s,sn),p(s,an),p(s,tn),p(s,en),p(s,on),p(s,pn),p(s,cn),A(ln,cn,null),p(s,rn),rn.innerHTML='<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n  <span class="token keyword">import</span> VisibilityChange <span class="token keyword">from</span> <span class="token string">"svelte-visibility-change"</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">let</span> state<span class="token punctuation">;</span> <span class="token comment">/** "visible" | "hidden" */</span>\n\n  $<span class="token operator">:</span> document<span class="token punctuation">.</span>title <span class="token operator">=</span> state<span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>VisibilityChange</span> <span class="token attr-name"><span class="token namespace">bind:</span>state</span> <span class="token punctuation">/></span></span>\n',p(s,dn),p(s,kn),p(s,hn),p(s,gn),p(s,fn),p(s,vn),vn.innerHTML='<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n  <span class="token keyword">import</span> VisibilityChange <span class="token keyword">from</span> <span class="token string">"svelte-visibility-change"</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">let</span> visible<span class="token punctuation">;</span> <span class="token comment">/** boolean */</span>\n  <span class="token keyword">let</span> hidden<span class="token punctuation">;</span> <span class="token comment">/** boolean */</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>VisibilityChange</span> <span class="token attr-name"><span class="token namespace">bind:</span>visible</span> <span class="token attr-name"><span class="token namespace">bind:</span>hidden</span> <span class="token punctuation">/></span></span>\n',p(s,bn),p(s,mn),p(s,yn),p(s,$n),p(s,Tn),p(s,wn),A(xn,wn,null),p(wn,Cn),p(wn,Ln),p(s,Mn),Mn.innerHTML='<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n  <span class="token keyword">import</span> VisibilityChange <span class="token keyword">from</span> <span class="token string">"svelte-visibility-change"</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">let</span> events <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>VisibilityChange</span>\n  <span class="token attr-name"><span class="token namespace">on:</span>visible=</span><span class="token language-javascript"><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>events <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>events<span class="token punctuation">,</span> <span class="token string">"on:visible"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>\n  <span class="token attr-name"><span class="token namespace">on:</span>hidden=</span><span class="token language-javascript"><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>events <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>events<span class="token punctuation">,</span> <span class="token string">"on:hidden"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>\n<span class="token punctuation">/></span></span>\n\n<span class="token language-javascript"><span class="token punctuation">{</span>events<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>\n',p(s,Hn),p(s,En),p(s,_n),p(s,An),p(s,jn),p(s,Sn),p(s,Pn),p(s,In),In.innerHTML='<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>VisibilityChange</span>\n  <span class="token attr-name"><span class="token namespace">on:</span>change=</span><span class="token language-javascript"><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> detail <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>detail<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "visible" | "hidden"</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>detail<span class="token punctuation">.</span>visible<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// boolean</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>detail<span class="token punctuation">.</span>hidden<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// boolean</span>\n  <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n<span class="token punctuation">/></span></span>\n',p(s,qn),p(s,Nn),p(s,Vn),p(s,Dn),p(s,On),p(s,Un),p(s,Fn),p(s,Gn),Gn.innerHTML='<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n  <span class="token keyword">import</span> <span class="token punctuation">{</span> visibilityChange <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"svelte-visibility-change"</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>\n  <span class="token attr-name"><span class="token namespace">use:</span>visibilityChange</span>\n  <span class="token attr-name"><span class="token namespace">on:</span>change=</span><span class="token language-javascript"><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> detail <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>detail<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "visible" | "hidden"</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>detail<span class="token punctuation">.</span>visible<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// boolean</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>detail<span class="token punctuation">.</span>hidden<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// boolean</span>\n  <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n<span class="token punctuation">/></span></span>\n',p(s,Bn),p(s,zn),p(s,Wn),p(s,Yn),Yn.innerHTML='<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n  <span class="token keyword">import</span> <span class="token punctuation">{</span> visibilityChange <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"svelte-visibility-change"</span><span class="token punctuation">;</span>\n  <span class="token keyword">import</span> <span class="token punctuation">{</span> OnChangeEvent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"svelte-visibility-change/types"</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> onChange<span class="token operator">:</span> <span class="token function-variable function">OnChangeEvent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> detail <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>detail<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "visible" | "hidden"</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>detail<span class="token punctuation">.</span>visible<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// boolean</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>detail<span class="token punctuation">.</span>hidden<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// boolean</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">use:</span>visibilityChange</span> <span class="token attr-name"><span class="token namespace">on:</span>change</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{onChange}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n',p(s,Rn),p(s,Jn),p(s,Kn),p(s,Qn),p(s,Xn),p(s,Zn),p(s,ns),p(s,ss),p(s,as),p(s,ts),p(s,es),p(s,os),p(s,ps),p(s,is),p(s,cs),p(s,ls),p(s,us),p(s,rs),p(s,ds),p(s,ks),p(s,hs),p(s,gs),p(s,fs),p(s,vs),bs=!0},p(n,[s]){const a={};var t;!un&&1&s&&(un=!0,a.state=n[0],t=()=>un=!1,m.push(t)),ln.$set(a),(!bs||2&s)&&ms!==(ms=n[1].join(", ")+"")&&function(n,s){s=""+s,n.wholeText!==s&&(n.data=s)}(Ln,ms)},i(n){bs||(H(ln.$$.fragment,n),H(xn.$$.fragment,n),bs=!0)},o(n){E(ln.$$.fragment,n),E(xn.$$.fragment,n),bs=!1},d(n){n&&i(s),j(ln),j(xn)}}}function D(n,s,a){let t,e=[];return n.$$.update=()=>{1&n.$$.dirty&&(document.title=t)},[t,e,function(n){t=n,a(0,t)},()=>a(1,e=[...e,"on:visible"]),()=>a(1,e=[...e,"on:hidden"])]}return new class extends I{constructor(n){super(),P(this,n,D,V,o,{})}}({target:document.body})}();
